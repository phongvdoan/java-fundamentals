/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;


import java.io.FileNotFoundException;
import java.util.*;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    public static int[] roll(int n) {
        int[] arrayOfRolls = new int[n];

        for(int i = 0; i < arrayOfRolls.length; i++) {
           int rollResult = (int) (Math.random() * 6 ) + 1;
            arrayOfRolls[i] = rollResult;
        }
        return arrayOfRolls;
    }

    public static boolean containsDuplicates(int[] array){
        for(int index = 0; index < array.length; index++){
            for(int secIndex = index + 1; secIndex < array.length; secIndex++){
                if(array[index] == array[secIndex]){
                    return true;
                }
            }
        }
        return false;
    }

    public static double calculatingAverages(int[] array){
       double sumTotal = 0;
        for( int number : array){
            sumTotal += number;
        }
        return sumTotal / array.length;
    }

    public static int[] arrayWithTheLowestAverage(int[][] arraysOfArrays){
        int[] arrayofLowestAverage = arraysOfArrays[0];

        for(int index = 1; index < arraysOfArrays.length; index++ ) {
            if (calculatingAverages(arraysOfArrays[index]) < calculatingAverages(arrayofLowestAverage)) {
                arrayofLowestAverage = arraysOfArrays[index];
            }
        }
        return arrayofLowestAverage;
    }

    public static String analyzingWeatherData(int[][] arrayOfArrays) {
        HashSet<Integer> uniqueTemp = new HashSet<>();
        int highestTemp = arrayOfArrays[0][0];
        int lowestTemp = arrayOfArrays[0][0];
        for (int[] array: arrayOfArrays) {
            for(int index = 0; index < array.length; index++) {
                uniqueTemp.add(array[index]);
                if(array[index] < lowestTemp){
                    lowestTemp = array[index];
                }
                if(array[index] > highestTemp) {
                    highestTemp = array[index];
                }
            }
        }

        String result = "High: " + highestTemp + "\n";
        result += "Low: " + lowestTemp + "\n";
        for( int checkforTemp = lowestTemp; checkforTemp < highestTemp; checkforTemp++) {
            //https://stackoverflow.com/questions/15730134/java-opposite-of-contains-does-not-contain
            if(!uniqueTemp.contains(checkforTemp)) {
                result += "Never saw temperature: " + checkforTemp + "\n";
            }
        }
        return result;
    }

    public static String tally(List<String> votes) {

        String winner = " ";

        HashMap<String, Integer> totalVotes = new HashMap<>();
        for(String name : votes){
            totalVotes.put(name, 0);
        }

        for( String vote : votes) {
            int nameWasSeenCount = totalVotes.get(vote);
            totalVotes.put(vote, nameWasSeenCount + 1);
        }

        int mostVotes = Integer.MIN_VALUE;

        //https://www.baeldung.com/java-iterate-map
        for(HashMap.Entry<String, Integer> entry : totalVotes.entrySet()) {
            if (entry.getValue() > mostVotes){
                mostVotes = entry.getValue();
                winner = entry.getKey();

            }
        }

        return winner;
    }

}
